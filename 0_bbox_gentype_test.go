// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package syncs_test

import "sync/atomic"

type RefCounterOfDummy_stream struct {
	cnt    *uint32
	obj    *dummy_stream
	relase func(*dummy_stream)
}

func NewRefCounterOfDummy_stream(obj *dummy_stream, release func(*dummy_stream)) *RefCounterOfDummy_stream {
	cnt := uint32(1)
	return &RefCounterOfDummy_stream{
		cnt:    &cnt,
		obj:    obj,
		relase: release,
	}
}

func (__ *RefCounterOfDummy_stream) Clone() *RefCounterOfDummy_stream {
	if atomic.AddUint32(__.cnt, 1) == 1 {
		panic("Release() called during clone")
	}
	return __
}

func (__ *RefCounterOfDummy_stream) Object() *dummy_stream {
	if atomic.LoadUint32(__.cnt) == 0 {
		return nil
	}
	return __.obj
}

func (__ *RefCounterOfDummy_stream) Release() {
	if atomic.AddUint32(__.cnt, ^uint32(0)) == 0 {
		__.relase(__.obj)
	}
}
